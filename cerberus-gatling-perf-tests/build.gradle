import org.apache.commons.io.FileUtils

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath group: 'commons-io', name: 'commons-io', version: '2.5'

    }
}

apply plugin: 'java'
apply plugin: 'scala'

dependencies {
    compile group: 'org.scala-lang', name: 'scala-library', version: '2.11.0'
    compile group: 'io.gatling', name: 'gatling-app', version: '2.2.5'
    compile group: 'io.gatling.highcharts', name: 'gatling-charts-highcharts', version: '2.2.5'

    compile group: 'com.amazonaws', name: 'aws-java-sdk-kms', version: '1.11.76'
    compile group: 'com.amazonaws', name: 'aws-java-sdk-sts', version: '1.11.76'
    compile group: 'com.amazonaws', name: 'aws-java-sdk-iam', version: '1.11.76'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.8.8'
    compile 'com.squareup.okhttp3:okhttp:3.7.0'
    compile project(":cerberus-api-tests")
}

task runSimulation() {
    group = 'gatling'
    description = 'Runs gatling simulation'
    dependsOn project.tasks.findByName('testClasses')

    doLast {
        String simulation = 'com.nike.cerberus.IamPrincipalAuthAndReadSimulation'
        String reportPath = "${project.getBuildDir().absolutePath}${File.separator}reports${File.separator}gatling"
        Map<String, String> options = [:]

        // debugging options
        boolean enableDebug = false
        int debugPort=5006
        boolean suspend=true

        logger.lifecycle "Gatling: Creating generated folders"

        File target = new File("${project.projectDir.getAbsolutePath()}/target/test-classes")
        target.mkdirs()
        File testClass = new File("${project.buildDir}/classes/test/")

        logger.lifecycle "----- Start Processing ${simulation}. -----"

        project.javaexec {
            classpath = project.sourceSets.main.runtimeClasspath + project.sourceSets.test.runtimeClasspath
            systemProperties = options
            main = "io.gatling.app.Gatling"
            args = [
                    '--simulation', simulation,
                    '-rf', reportPath
            ]

            if (enableDebug) {
                jvmArgs = ["-Xdebug", "-Xrunjdwp:transport=dt_socket,server=y,suspend=${suspend ? 'y' : 'n'},address=$debugPort"]
            }
        }

        logger.lifecycle "----- End Processing ${simulation}. -----"

        logger.lifecycle "Deleted generated folders"
        if (target.exists()) {
            FileUtils.deleteDirectory(target)
        }
    }
}

// can this just be the shadow jar plugin #TODO
task gatlingCompileSimulationFatJar() {
    def testClasses = project.tasks.findByName('testClasses')
    if (testClasses != null) {
        dependsOn testClasses
    }

    doLast {
        File buildDir = new File("${project.rootDir}/build/libs")
        buildDir.mkdirs()

        List deps = []
        deps.addAll(project.configurations.compile.files.collect())
        deps.addAll(project.configurations.testCompile.files.collect())

        manifest {
            attributes 'Implementation-Title': project.getName() + '-gatling',
                    'Implementation-Version': project.getVersion(),
                    'Class-Path': deps.each { File file -> file.getName() }.join(' ')
        }
        baseName = project.getName() + "-gatling-all"

        // Grab the dependencies
        from(deps.each { File file ->
            file.isDirectory() ? file : project.zipTree(file)
        }) {
            exclude "META-INF/*.SF"
            exclude "META-INF/*.DSA"
            exclude "META-INF/*.RSA"
        }

        from(project.sourceSets.test.scala.getSrcDirs().each { File file ->
            file.isDirectory() ? file : project.zipTree(file)
        })

        from "${project.rootDir}/src/test/resources"

        with project.tasks.findByName('jar')
        copy()
    }
}